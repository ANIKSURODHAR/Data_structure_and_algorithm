#include<bits/stdc++.h>

 using namespace std;

 const long long int N=1e7+9;

 long long int arr[N+1];

 long long int totall[N*4];



 void build(long long int node, long long int start, long long int last){

  if(start==last){

    totall[node]=arr[start];

    return;
  }

  long long int left=2*node , right=(2*node)+1;

  long long int mid=(start+last)/2;

  build(left, start , mid);

  build(right , mid+1 ,last);

  totall[node]=min(totall[left],totall[right]);

 }



 long long int query(long long int node, long long int start, long long int last,long long int l, long long int r){

   if(r<start || l>last) return 10000000000;


  if(l<=start && last<=r){

    return totall[node];
  }


  long long int left=2*node , right=(2*node)+1;

  long long int mid=(start+last)/2;

  return min(query(left , start , mid , l ,r) , query(right , mid+1 , last , l , r));

 }



 void update(long long int node, long long int start, long long int last,long long int index, long long int up_num){

  if(  start>index || last<index  )

      return ;

  if(start==last && start == index){

    totall[node]=up_num;

    return;
  }


  long long int left=2*node , right=(2*node)+1;

  long long int mid=(start+last)/2;

  update(left, start , mid ,index , up_num);

  update(right , mid+1 ,last ,index , up_num);

  totall[node]=min(totall[left],totall[right]);

 }


 int main(){


long long int n , m;

 cin>>n>>m;

 for(int i=1;i<=n;i++){

    cin>>arr[i];
 }

 build(1,1,n);


 while(m--){

    long long int a, l, r;

    cin>>a>>l>>r;

    if(a==1){

      update(1, 1 , n, l+1 , r);
    }
    else if(a==2){

        cout<<1ll*query(1,1,n,l+1,r)<<"\n";
    }
 }


 }
